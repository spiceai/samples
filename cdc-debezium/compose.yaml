services:
  postgres:
    image: "postgres:alpine"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    expose:
      - "5432"
    ports:
      - 15432:5432
    volumes:
      - ./init:/docker-entrypoint-initdb.d
      - ./pg_config.conf:/etc/postgresql/postgresql.conf
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]  
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '2'
          memory: 2G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
  redpanda-kafka-0:
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers'
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers'
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda-kafka-0:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda-kafka-0:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda-kafka-0:33145
      - --advertise-rpc-addr redpanda-kafka-0:33145
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      - --default-log-level=info
    image: docker.redpanda.com/redpandadata/redpanda:v24.1.8
    container_name: redpanda-kafka-0
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 9644:9644
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s
  redpanda-kafka-console:
    container_name: redpanda-kafka-console
    image: docker.redpanda.com/redpandadata/console:v2.6.0
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda-kafka-0:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda-kafka-0:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda-kafka-0:9644"]
    ports:
      - 8080:8080
    depends_on:
      - redpanda-kafka-0
  debezium:
    image: debezium/connect:2.7
    container_name: debezium
    environment:
      BOOTSTRAP_SERVERS: redpanda-kafka-0:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
    depends_on: [postgres, redpanda-kafka-0]
    ports:
      - 8083:8083